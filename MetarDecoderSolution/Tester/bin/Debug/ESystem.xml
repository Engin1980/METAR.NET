<?xml version="1.0"?>
<doc>
<assembly>
<name>
ESystem
</name>
</assembly>
<members>
<member name="F:ESystem.Geometry.PointD.X">
	<summary>
 X axis value
 </summary>
	<remarks></remarks>
</member><member name="F:ESystem.Geometry.PointD.Y">
	<summary>
 Y axis value
 </summary>
	<remarks></remarks>
</member><member name="M:ESystem.Geometry.PointD.#ctor(System.Double,System.Double)">
	<summary>
 Initializes a new Instance of ESystem.Geometry.PointD
 </summary>
	<param name="x"></param>
	<param name="y"></param>
</member><member name="M:ESystem.Geometry.PointD.op_Implicit(System.Drawing.Point)~ESystem.Geometry.PointD">
	<summary>
 Converts implicitly Point to PointD.
 </summary>
	<param name="point"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:ESystem.Geometry.PointD.op_Explicit(ESystem.Geometry.PointD)~System.Drawing.Point">
	<summary>
 Converts explicitly PointD to Point.
 </summary>
	<param name="point"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:ESystem.Geometry.PointD">
	<summary>
 Represents point with double-precision.
 </summary>
	<remarks></remarks>
</member><member name="P:ESystem.Collections.EList`1.LastIndex">
	<summary>
 Returns index of last item in collection
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:ESystem.Collections.EList`1.Create(System.Collections.Generic.IEnumerable{`0})">
	<summary>
 Creates elist from list.
 </summary>
	<param name="list"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:ESystem.Collections.EList`1.SplitByIndex(System.Int32,System.Boolean)">
	<summary> 
 Cuts list into two parts by index. 
 </summary>
	<param name="index">Index where to split.</param>
	<param name="excludeSplittingItem">If True, indexed item will not appear in any created lists. 
 If False, indexed item will be the first in the second list.</param>
	<returns></returns>
</member><member name="M:ESystem.Collections.EList`1.EGetRange(System.Int32)">
	<summary> 
 Returns items in range from collection, from index to the end of source list. 
 </summary>
	<param name="startIndex">Start index, inclusive.</param>
	<returns></returns>
</member><member name="M:ESystem.Collections.EList`1.EGetRange(System.Int32,System.Int32)">
	<summary> 
 Returns items in range from collection. 
 </summary>
	<param name="startIndex">Start index, inclusive.</param>
	<param name="count">Count.</param>
	<returns></returns>
</member><member name="M:ESystem.Collections.EList`1.GetRandom(System.Random)">
	<summary> 
 Returns random item from collection. 
 </summary>
	<returns></returns>
</member><member name="M:ESystem.Collections.EList`1.GetRandom">
	<summary> 
 Returns random item from collection. 
 </summary>
	<returns></returns>
</member><member name="M:ESystem.Collections.EList`1.GetRandom(System.Int32)">
	<summary> 
 Returns random item from collection. 
 </summary>
	<returns></returns>
</member><member name="M:ESystem.Collections.EList`1.AddIfNotContained(`0)">
	<summary> 
 Adds new item into collection, if item is not already inserted. 
 Return true if item inserted, false if not. 
 </summary>
	<param name="item"></param>
</member><member name="M:ESystem.Collections.EList`1.AddDistinct(`0)">
	<summary> 
 Adds new item into collection, if item is not already inserted. 
 Return true if item inserted, false if not. 
 </summary>
	<param name="item"></param>
</member><member name="M:ESystem.Collections.EList`1.GetBy``1(System.Func{`0,System.Boolean})">
	<summary> 
 Returns all items for which predicate is true.
 </summary>
	<param name="predicate">Function to select.</param>
	<returns>Items for which function is true</returns>
</member><member name="M:ESystem.Collections.EList`1.GetBy(System.Func{`0,System.Boolean})">
	<summary> 
 Returns all items for which predicate is true.
 </summary>
	<param name="predicate">Function to select.</param>
	<returns>Items for which function is true</returns>
</member><member name="M:ESystem.Collections.EList`1.CutBy``1(System.Func{`0,System.Boolean})">
	<summary>
 Removes item accepted by predicate from current collection and 
 returns them in new collection.
 </summary>
	<param name="predicate">Predicate to match item to be removed.</param>
	<returns>Removed items in new list.</returns>
	<remarks></remarks>
</member><member name="M:ESystem.Collections.EList`1.CutBy(System.Func{`0,System.Boolean})">
	<summary>
 Removes item accepted by predicate from current collection and 
 returns them in new collection.
 </summary>
	<param name="predicate">Predicate to match item to be removed.</param>
	<returns>Removed items in new list.</returns>
	<remarks></remarks>
</member><member name="M:ESystem.Collections.StringCollection.#ctor(System.String[])">
	<summary>
 Initializes a new Instance of ESystem.Collections.StringCollection
 </summary>
	<param name="Params"></param>
</member><member name="M:ESystem.Collections.StringCollection.#ctor(System.String,System.Char,System.Boolean)">
	<summary>
 Initializes a new Instance of ESystem.Collections.StringCollection
 </summary>
	<param name="text">Text to split.</param>
	<param name="separator">Separator</param>
	<param name="detectSubStrings">If true, function will not split string in quotes.</param>
	<remarks>
 Konstruktor tvořící novou instanci a naplní ji položkami vytvořenými rozsekáním _
 vstupního řetězce "Text" podle znaku "Separator". Pokud "IngorovatRetezce" = True, _
 tak se znak "Separator" bude ignorovat v řetězci uzavřených v uvozovkách.
 </remarks>
</member><member name="M:ESystem.Collections.StringCollection.AddEmpty">
	<summary>
 Adds new empty string (not null) into collection.
 </summary>
	<remarks></remarks>
</member><member name="M:ESystem.Collections.StringCollection.AddNull">
	<summary>
 Adds new null item into collection.
 </summary>
	<remarks></remarks>
</member><member name="M:ESystem.Collections.StringCollection.AddTrimmed(System.String)">
	<summary>
 Add trimmed item into collection. Is the same as Add (text.Trim()).
 </summary>
	<param name="Text"></param>
	<remarks></remarks>
</member><member name="P:ESystem.Collections.StringCollection.Item(System.Int32)">
	<summary>
 Returns item by index.
 </summary>
	<param name="index"></param>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:ESystem.Collections.StringCollection.Clone">
	<summary>
 Creates clone of object.
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:ESystem.Collections.StringCollection">
	<summary>
 Represents collection of strings.
 </summary>
	<seealso cref="T:ESystem.Collections.EList(Of T)"/>
</member><member name="F:ESystem.TimeStats._Interval">
	<summary>
 Private field for property Interval
 </summary>
	<default>new TimeSpan(1,0,0);</default>
</member><member name="P:ESystem.TimeStats.Interval">
	<summary>
 Defines Interval
 </summary>
	<remarks>Default value is new TimeSpan(1,0,0);</remarks>
	<default>new TimeSpan(1,0,0);</default>
</member><member name="P:ESystem.TimeStats.CountInLastInterval">
	<summary>
 Returns item count in last interval
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:ESystem.TimeStats.CountPerLastInterval">
	<summary>
 Return items/per interval value calculated by last interval
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:ESystem.TimeStats.Count">
	<summary>
 Return total count
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:ESystem.TimeStats.CountPerInterval">
	<summary>
 Return count per interval calculated from whole data
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:ESystem.TimeStats.Pack">
	<summary>
 Updates values for last interval
 </summary>
	<remarks></remarks>
</member><member name="M:ESystem.TimeStats.Pack(System.DateTime)">
	<summary>
 Updates values for last interval by parameter - current time
 </summary>
	<param name="currentTime"></param>
	<remarks></remarks>
</member><member name="M:ESystem.TimeStats.#ctor">
	<summary>
 Creates new instance for interval = 1 hour
 </summary>
	<remarks></remarks>
</member><member name="M:ESystem.TimeStats.#ctor(System.TimeSpan)">
	<summary>
 Creates new instance for specified interval
 </summary>
	<param name="interval"></param>
	<remarks></remarks>
</member><member name="M:ESystem.TimeStats.Clone">
	<summary>
 Clones value into new one
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="F:ESystem.Consts.CZECHCODEPAGE">
	<summary>
 Czech code-page (1250)
 </summary>
</member><member name="T:ESystem.Consts">
	<summary>
 Module for definition constants
 </summary>
	<remarks></remarks>
</member><member name="P:ESystem.My.Resources.Resources.ResourceManager">
	<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member><member name="P:ESystem.My.Resources.Resources.Culture">
	<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member><member name="T:ESystem.My.Resources.Resources">
	<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member><member name="F:ESystem.Geometry.PolygoneD._Points">
	<summary>
 Private field for property Points
 </summary>
	<default>New EList(Of PointD)</default>
</member><member name="P:ESystem.Geometry.PolygoneD.Points">
	<summary>
 Defines Points
 </summary>
	<remarks>Default value is New EList(Of PointD)</remarks>
	<default>New EList(Of PointD)</default>
</member><member name="M:ESystem.Geometry.PolygoneD.GetLines">
	<summary>
 Returns set of lines creating polygon. If last point is different from first, polygon is
 automatically closed.
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:ESystem.Geometry.PolygoneD.IsInside(ESystem.Geometry.PointD)">
	<summary>
 Returns true if point is inside of polygon.
 </summary>
	<param name="point"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:ESystem.Geometry.PolygoneD">
	<summary>
 Represents polygone of double points.
 </summary>
	<remarks></remarks>
</member><member name="F:ESystem.Geometry.LineD.X">
	<summary>
 First end-point of line.
 </summary>
	<remarks></remarks>
</member><member name="F:ESystem.Geometry.LineD.Y">
	<summary>
 Second end-point of line
 </summary>
	<remarks></remarks>
</member><member name="F:ESystem.Geometry.LineD.A">
	<summary>
 Slope of line. A in y=ax+b.
 </summary>
	<remarks></remarks>
</member><member name="F:ESystem.Geometry.LineD.B">
	<summary>
 Intersection with Y-axis. B in y=ax+b.
 </summary>
	<remarks></remarks>
</member><member name="M:ESystem.Geometry.LineD.#ctor(ESystem.Geometry.PointD,ESystem.Geometry.PointD)">
	<summary>
 Initializes a new Instance of ESystem.Geometry.Line
 </summary>
	<param name="x"></param>
	<param name="y"></param>
</member><member name="M:ESystem.Geometry.LineD.#ctor(System.Double,System.Double,System.Double,System.Double)">
	<summary>
 Initializes a new Instance of ESystem.Geometry.Line
 </summary>
	<param name="ax"></param>
	<param name="ay"></param>
	<param name="bx"></param>
	<param name="by"></param>
</member><member name="M:ESystem.Geometry.LineD.GetY(System.Double)">
	<summary>
 Calculates Y for X.
 </summary>
	<param name="x"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:ESystem.Geometry.LineD.GetX(System.Double)">
	<summary>
 Calculates X for Y.
 </summary>
	<param name="y"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:ESystem.Geometry.LineD.IsVertical">
	<summary>
 Returns true if line is vertical (top-down).
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:ESystem.Geometry.LineD.IsHorizontal">
	<summary>
 Returns true if line is horizontal (left-right)
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:ESystem.Geometry.LineD.IsOnLine(ESystem.Geometry.PointD)">
	<summary>
 Returns true if a point is on the line (with some precision; see overloads).
 </summary>
	<param name="point"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:ESystem.Geometry.LineD.IsOnLine(ESystem.Geometry.PointD,System.Double)">
	<summary>
 Returns true if a point is on the line (with some precision; see overloads).
 </summary>
	<param name="point"></param>
	<param name="acceptedErrorPercentage"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:ESystem.Geometry.LineD.IsOnLineAxis(ESystem.Geometry.PointD)">
	<summary>
 Returns true if point is on the axix of the line (with some precision; see overloads).
 </summary>
	<param name="point"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:ESystem.Geometry.LineD.IsOnLineAxis(ESystem.Geometry.PointD,System.Double)">
	<summary>
 Returns true if point is on the axix of the line.
 </summary>
	<param name="point"></param>
	<param name="acceptedErrorPercentage">Requested precision (0 = absolute, 1 is 100% difference)</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:ESystem.Geometry.LineD.GetIntersection(ESystem.Geometry.LineD)">
	<summary>
 Returns intersection of of this line with other line, null if there is no intersection, random one,
 if there are multiple intersections.
 </summary>
	<param name="other"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:ESystem.Geometry.LineD">
	<summary>
 Represents line (vector) from point to point.
 </summary>
	<remarks></remarks>
</member><member name="M:ESystem.ICloneable`1.Clone">
	<summary>
 Clones object into new instance.
 </summary>
	<returns></returns>
</member><member name="T:ESystem.ICloneable`1">
	<summary>
 Interface to introduce generic clone method.
 </summary>
	<typeparam name="T">Type to clone.</typeparam>
</member><member name="M:ESystem.Extensions.Split(System.String,System.String)">
	<summary>
 Splits string by another string
 </summary>
	<param name="source"></param>
	<param name="delimiter"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:ESystem.Extensions.Info(System.Exception)">
	<summary>
 Returns joined message from exception and all inner exceptions.
 </summary>
	<param name="exception"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:ESystem.Extensions.IsBetween``1(System.IComparable{``0},System.IComparable{``0},System.IComparable{``0})">
	<summary>
 Checks if value is between bounds, both bounds are inclusive.
 </summary>
	<typeparam name="T"></typeparam>
	<param name="value"></param>
	<param name="firstBound">Inclusive lower bound.</param>
	<param name="secondBound">Inclusive uper bound.</param>
	<returns>True if value is between bounds (both inclusive).</returns>
	<remarks></remarks>
</member><member name="M:ESystem.Extensions.LastIndex(System.Collections.ICollection)">
	<summary>
 Returns index of last item in collection
 </summary>
</member><member name="M:ESystem.Extensions.ToString(System.Collections.ICollection,System.String)">
	<summary>
 Returns items joined together by separator.
 </summary>
	<param name="separator"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:ESystem.Extensions.SplitByIndex``1(System.Collections.Generic.ICollection{``0},System.Int32,System.Boolean)">
	<summary> 
 Cuts list into two parts by index. 
 </summary>
	<param name="index">Index where to split.</param>
	<param name="excludeSplittingItem">If True, indexed item will not appear in any created lists. 
 If False, indexed item will be the first in the second list.</param>
	<returns></returns>
</member><member name="M:ESystem.Extensions.EGetRange``1(System.Collections.Generic.ICollection{``0},System.Int32)">
	<summary> 
 Returns items in range from collection, from index to the end of source list. 
 </summary>
	<param name="startIndex">Start index, inclusive.</param>
	<returns></returns>
</member><member name="M:ESystem.Extensions.EGetRange``1(System.Collections.Generic.ICollection{``0},System.Int32,System.Int32)">
	<summary> 
 Returns items in range from collection. 
 </summary>
	<param name="startIndex">Start index, inclusive.</param>
	<param name="count">Count.</param>
	<returns></returns>
</member><member name="M:ESystem.Extensions.GetRandom``1(System.Collections.Generic.ICollection{``0},System.Random)">
	<summary> 
 Returns random item from collection. 
 </summary>
	<returns></returns>
</member><member name="M:ESystem.Extensions.GetRandom``1(System.Collections.Generic.ICollection{``0})">
	<summary> 
 Returns random item from collection. 
 </summary>
	<returns></returns>
</member><member name="M:ESystem.Extensions.GetRandom``1(System.Collections.Generic.ICollection{``0},System.Int32)">
	<summary> 
 Returns random item from collection. 
 </summary>
	<returns></returns>
</member><member name="M:ESystem.Extensions.Cut``1(System.Collections.Generic.ICollection{``0},System.Func{``0,System.Boolean})">
	<summary>
 Removes item accepted by predicate from current collection and 
 returns them in new collection.
 </summary>
	<param name="predicate">Predicate to match item to be removed.</param>
	<returns>Removed items in new list.</returns>
	<remarks></remarks>
</member><member name="M:ESystem.Extensions.CutTo``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.ICollection{``0},System.Func{``0,System.Boolean})">
	<summary>
 Removes item accepted by predicate from current collection into the parameter.
 </summary>
	<param name="predicate">Predicate to match item to be removed.</param>
	<returns>Removed items in new list.</returns>
	<remarks></remarks>
</member><member name="M:ESystem.Extensions.AddDistinct``1(System.Collections.Generic.IList{``0},``0)">
	<summary> 
 Adds new item into collection, if item is not already inserted. 
 Return true if item inserted, false if not. 
 </summary>
	<param name="item"></param>
</member><member name="M:ESystem.Extensions.LastIndex(System.Array)">
	<summary>
 Returns index of last item in collection
 </summary>
</member><member name="M:ESystem.Extensions.ToString(System.Array,System.String)">
	<summary>
 Returns items joined together by separator.
 </summary>
	<param name="separator"></param>
	<returns></returns>
	<remarks></remarks>
</member>
</members>
</doc>